<?php
/* Dev notes
 * 2013-11-02 migrated to 2.11 platform by lgaetz
 * Search reverseaustralia.com
 * Developer docs: http://www.reverseaustralia.com/developer/
 * Current Limits (per 24 hours) as of 05/10/2016
 * Caller ID Extended Lookup: 20
 * Caller ID Simple Lookup: 40
 * API SUPPORT support@reverseaustralia.com
 * Test Number: 0262195555 Caller id
 * Test Number: 0280905401 Spam example shows return of score 32
 */

class ReverseAustralia_AU extends superfecta_base {

	public $description,$source_param;
	public $version_requirement = "2.11";

	public function __construct() {
		$this->description = "http://www.reverseaustralia.com - "._("Phone listings for Australia");
		$this->source_param = array(
			'API_Key' => array(
				'description' => _('Your API key from:'). "http://www.reverseaustralia.com/developer/",
				'type' => 'text',
				'default' => ''
			),
			'Spam_Threshold' => array(
				'description' => _('How sensitive of a spam score to use 1-100, 0 to disable'),
				'type' => 'number',
				'default' => '40'
			)
		);
	}

	function get_caller_id($thenumber, $run_param=array()) {
		$run_param['API_Key'] = isset($run_param['API_Key'])?$run_param['API_Key']:false;
		$run_param['Spam_Threshold'] = isset($run_param['Spam_Threshold'])?$run_param['Spam_Threshold']:40;
		$thenumber = urlencode($thenumber);
		$caller_id = null;
		$name = "";
		$spam = "";

		if (!$run_param['API_Key']) {
			$this->DebugPrint(_("A valid API Key is required to use this lookup source"));
		} else {

			$this->DebugPrint("Searching reverseaustralia.com - {$thenumber} ... ");

			if ($run_param['Spam_Threshold'])  {
				$spam = "&spamthreshold=".$run_param['Spam_Threshold'];
			}

			$url = 'http://api.reverseaustralia.com/cidlookup.php?format=json&key='.$run_param['API_Key'].'&q='.$thenumber.$spam;
			// $this->DebugPrint($url);   // for debug

			$value = $this->get_url_contents($url);
			// $value = '{"name":"Australian Communications Authority (aca)"}'; // For debug

			$result = (array)json_decode($value);
			if (isset($result['error'])) {
				if ($result['error'] == 'Not found') {
					//record not found
				}
			} else {
				$name = isset($result['name'])?$result['name']:'';
			}

			// If we found a match, return it
			if (strlen($name) > 1) {
				$caller_id = $name;
			} else {
				$this->DebugPrint(_("not found"));
			}

			return($caller_id);
		}
	}

}
